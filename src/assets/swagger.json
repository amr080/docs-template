{
  "swagger": "2.0",
  "info": {
    "version": "2.0.0",
    "title": "Centrifuge OS Node API",
    "description": "XFT OS Node API"
  },
  "host": "localhost:8082",
  "schemes": ["http"],
  "paths": {
    "/v1/documents/{document_id}/transfer_details/{transfer_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "transfer_id",
          "in": "path",
          "description": "Transfer Detail Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "PUT_v1-documents-document_id-transfer_details-transfer_id",
        "summary": "Updates a new transfer detail extension on a document and anchors it.",
        "tags": ["Transfer Details"],
        "description": "Updates a new transfer detail extension on a document and anchors it.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.TransferDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "get": {
        "operationId": "GET_v1-documents-document_id-transfer_details-transfer_id",
        "summary": "Returns the latest version of the transfer detail.",
        "tags": ["Transfer Details"],
        "description": "Returns the latest version of the transfer detail.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.TransferDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/nfts/registries/{registry_address}/tokens/{token_id}/transfer": {
      "parameters": [
        {
          "name": "registry_address",
          "in": "path",
          "description": "NFT registry address in hex",
          "required": true,
          "type": "string"
        },
        {
          "name": "token_id",
          "in": "path",
          "description": "NFT token ID in hex",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-nfts-registries-registry_address-tokens-token_id-transfer",
        "summary": "Transfers given NFT to provide address.",
        "tags": ["NFTs"],
        "description": "Transfers given NFT to provide address.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.TransferNFTResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/committed": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v2-documents-document_id-committed",
        "summary": "Returns the latest committed document associated with docID.",
        "tags": ["Documents"],
        "description": "Returns the latest committed document associated with docID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/funding_agreements": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-documents-document_id-funding_agreements",
        "summary": "Returns all the funding agreements in the document associated with document_id.",
        "tags": ["Funding Agreements"],
        "description": "Returns all the funding agreements in the document associated with document_id.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "post": {
        "operationId": "POST_v1-documents-document_id-funding_agreements",
        "summary": "Creates a new funding agreement on the document.",
        "tags": ["Funding Agreements"],
        "description": "Creates a new funding agreement on the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/entities": {
      "post": {
        "operationId": "POST_v1-entities",
        "summary": "Creates a new Entity and anchors it.",
        "tags": ["Entities"],
        "description": "Creates a new Entity and anchors it.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.EntityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/entities/{document_id}/share": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-entities-document_id-share",
        "summary": "Share gives entity access to target identity.",
        "tags": ["Entities"],
        "description": "Share gives entity access to target identity.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.ShareEntityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/commit": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v2-documents-document_id-commit",
        "summary": "Commits a pending document.",
        "tags": ["Documents"],
        "description": "Commits a pending document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/signed_attribute": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v2-documents-document_id-signed_attribute",
        "summary": "Signs the given payload and add it the pending document.",
        "tags": ["Documents"],
        "description": "Signs the given payload and add it the pending document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/accounts": {
      "post": {
        "operationId": "POST_v1-accounts",
        "summary": "Creates a new account without any default configurations.",
        "tags": ["Accounts"],
        "description": "Creates a new account without any default configurations.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.Account"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "get": {
        "operationId": "GET_v1-accounts",
        "summary": "Returns all the accounts in the node.",
        "tags": ["Accounts"],
        "description": "Returns all the accounts in the node.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.Accounts"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/funding_agreements/{agreement_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "agreement_id",
          "in": "path",
          "description": "Funding agreement Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "PUT_v1-documents-document_id-funding_agreements-agreement_id",
        "summary": "Updates the funding agreement associated with agreement_id in the document.",
        "tags": ["Funding Agreements"],
        "description": "Updates the funding agreement associated with agreement_id in the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "get": {
        "operationId": "GET_v1-documents-document_id-funding_agreements-agreement_id",
        "summary": "Returns the funding agreement associated with agreement_id in the document.",
        "tags": ["Funding Agreements"],
        "description": "Returns the funding agreement associated with agreement_id in the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "operationId": "POST_webhook",
        "summary": "Webhook is a place holder to describe webhook response in swagger.",
        "tags": ["Webhook"],
        "description": "Webhook is a place holder to describe webhook response in swagger.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/notification.Message"
            }
          }
        }
      }
    },
    "/v1/accounts/generate": {
      "post": {
        "operationId": "POST_v1-accounts-generate",
        "summary": "Generates a new account with defaults.",
        "tags": ["Accounts"],
        "description": "Generates a new account with defaults.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.Account"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/relationships/{document_id}/entity": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Entity Relationship Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-relationships-document_id-entity",
        "summary": "Returns the latest version of the Entity through relationship ID.",
        "tags": ["Entities"],
        "description": "Returns the latest version of the Entity through relationship ID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.EntityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}": {
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "description": "Account ID",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "PUT_v1-accounts-account_id",
        "summary": "Updates an existing account.",
        "tags": ["Accounts"],
        "description": "Updates an existing account.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.Account"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "get": {
        "operationId": "GET_v1-accounts-account_id",
        "summary": "Returns the account associated with accountID.",
        "tags": ["Accounts"],
        "description": "Returns the account associated with accountID.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.Account"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/versions/{version_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "version_id",
          "in": "path",
          "description": "Document Version Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-documents-document_id-versions-version_id",
        "summary": "Returns the specific version of the document.",
        "tags": ["Documents"],
        "description": "Returns the specific version of the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/versions/{version_id}/funding_agreements/{agreement_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "version_id",
          "in": "path",
          "description": "Document Version Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "agreement_id",
          "in": "path",
          "description": "Funding agreement Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-documents-document_id-versions-version_id-funding_agreements-agreement_id",
        "summary": "Returns the funding agreement from a specific version of the document.",
        "tags": ["Funding Agreements"],
        "description": "Returns the funding agreement from a specific version of the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-documents-document_id",
        "summary": "Returns the latest version of the document.",
        "tags": ["Documents"],
        "description": "Returns the latest version of the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "put": {
        "operationId": "PUT_v1-documents-document_id",
        "summary": "Updates an existing document and anchors it.",
        "tags": ["Documents"],
        "description": "Updates an existing document and anchors it.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/entities/{document_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "operationId": "PUT_v1-entities-document_id",
        "summary": "Updates an existing Entity and anchors it.",
        "tags": ["Entities"],
        "description": "Updates an existing Entity and anchors it.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.EntityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "get": {
        "operationId": "GET_v1-entities-document_id",
        "summary": "Returns the latest version of the Entity.",
        "tags": ["Entities"],
        "description": "Returns the latest version of the Entity.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.EntityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "patch": {
        "operationId": "PATCH_v2-documents-document_id",
        "summary": "Updates a pending document.",
        "tags": ["Documents"],
        "description": "Updates a pending document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/pending": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v2-documents-document_id-pending",
        "summary": "Returns the pending document associated with docID.",
        "tags": ["Documents"],
        "description": "Returns the pending document associated with docID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/proofs": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-documents-document_id-proofs",
        "summary": "Generates proofs for the fields from latest version of the document.",
        "tags": ["Documents"],
        "description": "Generates proofs for the fields from latest version of the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.ProofsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/transfer_details": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-documents-document_id-transfer_details",
        "summary": "Returns a list of the latest versions of all transfer details on the document.",
        "tags": ["Transfer Details"],
        "description": "Returns a list of the latest versions of all transfer details on the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.TransferDetailListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "post": {
        "operationId": "POST_v1-documents-document_id-transfer_details",
        "summary": "Creates a new transfer detail extension on a document and anchors it.",
        "tags": ["Transfer Details"],
        "description": "Creates a new transfer detail extension on a document and anchors it.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.TransferDetailResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/nfts/registries/{registry_address}/mint": {
      "parameters": [
        {
          "name": "registry_address",
          "in": "path",
          "description": "NFT registry address in hex",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-nfts-registries-registry_address-mint",
        "summary": "Mints an NFT against a document.",
        "tags": ["NFTs"],
        "description": "Mints an NFT against a document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.MintNFTResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/nfts/registries/{registry_address}/tokens/{token_id}/owner": {
      "parameters": [
        {
          "name": "registry_address",
          "in": "path",
          "description": "Registry address in hex",
          "required": true,
          "type": "string"
        },
        {
          "name": "token_id",
          "in": "path",
          "description": "NFT token ID in hex",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-nfts-registries-registry_address-tokens-token_id-owner",
        "summary": "Returns the Owner of the given NFT.",
        "tags": ["NFTs"],
        "description": "Returns the Owner of the given NFT.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.NFTOwnerResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/entities/{document_id}/revoke": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-entities-document_id-revoke",
        "summary": "Revoke revokes target id's access to entity.",
        "tags": ["Entities"],
        "description": "Revoke revokes target id's access to entity.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.ShareEntityResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/accounts/{account_id}/sign": {
      "parameters": [
        {
          "name": "account_id",
          "in": "path",
          "description": "Account ID",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-accounts-account_id-sign",
        "summary": "Signs and returns the signature of the Payload.",
        "tags": ["Accounts"],
        "description": "Signs and returns the signature of the Payload.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.SignResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "operationId": "GET_ping",
        "summary": "Health check for Node",
        "tags": ["Health"],
        "description": "returns node version and network",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/health.Pong"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/roles/{role_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "role_id",
          "in": "path",
          "description": "Role ID",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v2-documents-document_id-roles-role_id",
        "summary": "Returns the role associated with the role ID in the document.",
        "tags": ["Documents"],
        "description": "Returns the role associated with the role ID in the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/v2.Role"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "patch": {
        "operationId": "PATCH_v2-documents-document_id-roles-role_id",
        "summary": "Updates an existing role on the document.",
        "tags": ["Documents"],
        "description": "Updates an existing role on the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/v2.Role"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/transition_rules/{rule_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "rule_id",
          "in": "path",
          "description": "Transition rule ID",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v2-documents-document_id-transition_rules-rule_id",
        "summary": "Returns the rule associated with the ruleID in the document.",
        "tags": ["Documents"],
        "description": "Returns the rule associated with the ruleID in the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/v2.TransitionRule"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      },
      "delete": {
        "operationId": "DELETE_v2-documents-document_id-transition_rules-rule_id",
        "summary": "Deletes the transition rule associated with ruleID from the document.",
        "tags": ["Documents"],
        "description": "Deletes the transition rule associated with ruleID from the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/collaborators": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "delete": {
        "operationId": "DELETE_v2-documents-document_id-collaborators",
        "summary": "Removes the collaborators from the document.",
        "tags": ["Documents"],
        "description": "Removes the collaborators from the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/versions/{version_id}": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "version_id",
          "in": "path",
          "description": "Document Version Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v2-documents-document_id-versions-version_id",
        "summary": "Returns the specific version of the document.",
        "tags": ["Documents"],
        "description": "Returns the specific version of the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/versions/{version_id}/proofs": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "version_id",
          "in": "path",
          "description": "Document Version Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-documents-document_id-versions-version_id-proofs",
        "summary": "Generates proofs for the fields from a specific document version.",
        "tags": ["Documents"],
        "description": "Generates proofs for the fields from a specific document version.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.ProofsResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/transition_rules": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v2-documents-document_id-transition_rules",
        "summary": "Adds a transition new rules to the document.",
        "tags": ["Documents"],
        "description": "Adds a new transition rules to the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/v2.TransitionRules"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/funding_agreements/{agreement_id}/sign": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "agreement_id",
          "in": "path",
          "description": "Funding agreement Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v1-documents-document_id-funding_agreements-agreement_id-sign",
        "summary": "Signs the funding agreement associated with agreement_id.",
        "tags": ["Funding Agreements"],
        "description": "Signs the funding agreement associated with agreement_id.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/jobs/{job_id}": {
      "parameters": [
        {
          "name": "job_id",
          "in": "path",
          "description": "Job ID",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-jobs-job_id",
        "summary": "Returns the status of a given Job.",
        "tags": ["Jobs"],
        "description": "Returns the status of a given Job.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/jobs.StatusResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents/{document_id}/versions/{version_id}/funding_agreements": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        },
        {
          "name": "version_id",
          "in": "path",
          "description": "Document Version Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "get": {
        "operationId": "GET_v1-documents-document_id-versions-version_id-funding_agreements",
        "summary": "Returns all the funding agreements from a specific version of the document.",
        "tags": ["Funding Agreements"],
        "description": "Returns all the funding agreements from a specific version of the document.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/userapi.FundingListResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents": {
      "post": {
        "operationId": "POST_v2-documents",
        "summary": "Creates a new document.",
        "tags": ["Documents"],
        "description": "Creates a new document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v1/documents": {
      "post": {
        "operationId": "POST_v1-documents",
        "summary": "Creates a new document and anchors it.",
        "tags": ["Documents"],
        "description": "Creates a new document and anchors it.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/coreapi.DocumentResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    },
    "/v2/documents/{document_id}/roles": {
      "parameters": [
        {
          "name": "document_id",
          "in": "path",
          "description": "Document Identifier",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "operationId": "POST_v2-documents-document_id-roles",
        "summary": "Adds a new role to the document.",
        "tags": ["Documents"],
        "description": "Adds a new role to the document.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "Hex encoded centrifuge ID of the account for the intended API action",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/v2.Role"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/httputils.HTTPError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "coreapi.ProofsRequest": {
      "title": "coreapi.ProofsRequest",
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.AttributeRequest": {
      "title": "coreapi.AttributeRequest",
      "type": "object",
      "properties": {
        "monetary_value": {
          "type": "object",
          "$ref": "#/definitions/coreapi.MonetaryValue"
        },
        "type": {
          "type": "string",
          "enum": [
            "integer",
            "decimal",
            "string",
            "bytes",
            "timestamp",
            "monetary"
          ]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "userapi.FundingDataResponse": {
      "title": "userapi.FundingDataResponse",
      "type": "object",
      "properties": {
        "funding": {
          "type": "object",
          "$ref": "#/definitions/funding.Data"
        },
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/funding.Signature"
          }
        }
      }
    },
    "coreapi.AttributeMapResponse": {
      "title": "coreapi.AttributeMapResponse",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "monetary_value": {
            "type": "object",
            "$ref": "#/definitions/coreapi.MonetaryValue"
          },
          "type": {
            "type": "string",
            "enum": [
              "integer",
              "decimal",
              "string",
              "bytes",
              "timestamp",
              "monetary"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.ResponseHeader": {
      "title": "coreapi.ResponseHeader",
      "type": "object",
      "properties": {
        "author": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "job_id": {
          "type": "string"
        },
        "nfts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreapi.NFT"
          }
        },
        "read_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        },
        "write_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.Accounts": {
      "title": "coreapi.Accounts",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coreapi.Account"
          }
        }
      }
    },
    "v2.AddRole": {
      "title": "v2.AddRole",
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "key": {
          "description": "Key is either hex encoded 32 byte ID or string label.\nString label is used as a preimage to sha256 for 32 byte hash.",
          "type": "string"
        }
      }
    },
    "v2.SignedAttributeRequest": {
      "title": "v2.SignedAttributeRequest",
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "payload": {
          "description": "payload to be signed in hex",
          "type": "string"
        }
      }
    },
    "entity.Address": {
      "title": "entity.Address",
      "type": "object",
      "properties": {
        "address_line_1": {
          "type": "string"
        },
        "address_line_2": {
          "type": "string"
        },
        "contact_person": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "is_main": {
          "type": "boolean"
        },
        "is_pay_to": {
          "type": "boolean"
        },
        "is_remit_to": {
          "type": "boolean"
        },
        "is_ship_to": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      }
    },
    "entity.BankPaymentMethod": {
      "title": "entity.BankPaymentMethod",
      "type": "object",
      "properties": {
        "address": {
          "type": "object",
          "$ref": "#/definitions/entity.Address"
        },
        "bank_account_number": {
          "type": "string"
        },
        "bank_key": {
          "type": "string"
        },
        "holder_name": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "supported_currency": {
          "type": "string"
        }
      }
    },
    "health.Pong": {
      "title": "health.Pong",
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "coreapi.SignRequest": {
      "title": "coreapi.SignRequest",
      "type": "object",
      "properties": {
        "payload": {
          "type": "string"
        }
      }
    },
    "pending.AddTransitionRules": {
      "title": "pending.AddTransitionRules",
      "type": "object",
      "properties": {
        "attribute_rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pending.AttributeRule"
          }
        }
      }
    },
    "pending.AttributeRule": {
      "title": "pending.AttributeRule",
      "type": "object",
      "properties": {
        "key_label": {
          "description": "attribute key label",
          "type": "string"
        },
        "role_id": {
          "description": "roleID is 32 byte role ID in hex. RoleID should already be part of the document.",
          "type": "string"
        }
      }
    },
    "coreapi.EthAccount": {
      "title": "coreapi.EthAccount",
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "coreapi.GenerateAccountPayload": {
      "title": "coreapi.GenerateAccountPayload",
      "type": "object",
      "properties": {
        "centrifuge_chain_account": {
          "type": "object",
          "$ref": "#/definitions/config.CentChainAccount"
        }
      }
    },
    "userapi.CreateEntityRequest": {
      "title": "userapi.CreateEntityRequest",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/coreapi.AttributeMapRequest"
        },
        "data": {
          "type": "object",
          "$ref": "#/definitions/entity.Data"
        },
        "read_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "write_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "byteutils.OptionalHex": {
      "title": "byteutils.OptionalHex",
      "type": "object",
      "properties": {
        "HexBytes": {
          "type": "array",
          "items": {}
        }
      }
    },
    "userapi.TransferDetailResponse": {
      "title": "userapi.TransferDetailResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "$ref": "#/definitions/transferdetails.Data"
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        }
      }
    },
    "v2.UpdateDocumentRequest": {
      "title": "v2.UpdateDocumentRequest",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/coreapi.AttributeMapRequest"
        },
        "data": {
          "type": "object"
        },
        "read_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scheme": {
          "type": "string",
          "enum": ["generic", "entity"]
        },
        "write_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "userapi.EntityResponse": {
      "title": "userapi.EntityResponse",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/coreapi.AttributeMapResponse"
        },
        "data": {
          "type": "object",
          "$ref": "#/definitions/userapi.EntityDataResponse"
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        }
      }
    },
    "coreapi.AttributeResponse": {
      "title": "coreapi.AttributeResponse",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "monetary_value": {
          "type": "object",
          "$ref": "#/definitions/coreapi.MonetaryValue"
        },
        "type": {
          "type": "string",
          "enum": [
            "integer",
            "decimal",
            "string",
            "bytes",
            "timestamp",
            "monetary"
          ]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "coreapi.ProofResponseHeader": {
      "title": "coreapi.ProofResponseHeader",
      "type": "object",
      "properties": {
        "document_id": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "version_id": {
          "type": "string"
        }
      }
    },
    "notification.Message": {
      "title": "notification.Message",
      "type": "object",
      "properties": {
        "account_id": {
          "description": "account_id is the account associated to webhook",
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "document_type": {
          "type": "string"
        },
        "event_type": {
          "type": "integer"
        },
        "from_id": {
          "description": "from_id if provided, original trigger of the event",
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "recorded": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "to_id": {
          "description": "to_id if provided, final destination of the event",
          "type": "string"
        }
      }
    },
    "v2.RemoveCollaboratorsRequest": {
      "title": "v2.RemoveCollaboratorsRequest",
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "documents.Proof": {
      "title": "documents.Proof",
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "property": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "sorted_hashes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "coreapi.MonetaryValue": {
      "title": "coreapi.MonetaryValue",
      "type": "object",
      "properties": {
        "chain_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "transferdetails.Data": {
      "title": "transferdetails.Data",
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "recipient_id": {
          "type": "string"
        },
        "scheduled_date": {
          "type": "string"
        },
        "sender_id": {
          "type": "string"
        },
        "settlement_date": {
          "type": "string"
        },
        "settlement_reference": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "transfer_id": {
          "type": "string"
        },
        "transfer_type": {
          "type": "string"
        }
      }
    },
    "funding.Data": {
      "title": "funding.Data",
      "type": "object",
      "properties": {
        "agreement_id": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "apr": {
          "type": "string"
        },
        "borrower_id": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "days": {
          "type": "string"
        },
        "fee": {
          "type": "string"
        },
        "funder_id": {
          "type": "string"
        },
        "nft_address": {
          "type": "string"
        },
        "payment_details_id": {
          "type": "string"
        },
        "repayment_amount": {
          "type": "string"
        },
        "repayment_due_date": {
          "type": "string"
        },
        "repayment_occurred_date": {
          "type": "string"
        }
      }
    },
    "userapi.FundingListResponse": {
      "title": "userapi.FundingListResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userapi.FundingDataResponse"
          }
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        }
      }
    },
    "coreapi.MintNFTRequest": {
      "title": "coreapi.MintNFTRequest",
      "type": "object",
      "properties": {
        "asset_manager_address": {
          "type": "string"
        },
        "deposit_address": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "proof_fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.ProofsResponse": {
      "title": "coreapi.ProofsResponse",
      "type": "object",
      "properties": {
        "field_proofs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/documents.Proof"
          }
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ProofResponseHeader"
        }
      }
    },
    "coreapi.CreateDocumentRequest": {
      "title": "coreapi.CreateDocumentRequest",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/coreapi.AttributeMapRequest"
        },
        "data": {
          "type": "object"
        },
        "read_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scheme": {
          "type": "string",
          "enum": ["generic", "entity"]
        },
        "write_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.DocumentResponse": {
      "title": "coreapi.DocumentResponse",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/coreapi.AttributeMapResponse"
        },
        "data": {
          "type": "object"
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        },
        "scheme": {
          "type": "string",
          "enum": ["generic", "entity"]
        }
      }
    },
    "userapi.TransferDetailListResponse": {
      "title": "userapi.TransferDetailListResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/transferdetails.Data"
          }
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        }
      }
    },
    "userapi.Relationship": {
      "title": "userapi.Relationship",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "entity_identifier": {
          "type": "string"
        },
        "owner_identity": {
          "type": "string"
        },
        "target_identity": {
          "type": "string"
        }
      }
    },
    "config.CentChainAccount": {
      "title": "config.CentChainAccount",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "ss_58_address": {
          "type": "string"
        }
      }
    },
    "entity.Contact": {
      "title": "entity.Contact",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "coreapi.MintNFTResponse": {
      "title": "coreapi.MintNFTResponse",
      "type": "object",
      "properties": {
        "deposit_address": {
          "type": "string"
        },
        "document_id": {
          "type": "string"
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.NFTResponseHeader"
        },
        "registry_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "userapi.FundingResponse": {
      "title": "userapi.FundingResponse",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "$ref": "#/definitions/userapi.FundingDataResponse"
        },
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        }
      }
    },
    "coreapi.NFTOwnerResponse": {
      "title": "coreapi.NFTOwnerResponse",
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "registry_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "v2.UpdateRole": {
      "title": "v2.UpdateRole",
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.SignResponse": {
      "title": "coreapi.SignResponse",
      "type": "object",
      "properties": {
        "payload": {
          "type": "string"
        },
        "public_key": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "signer_id": {
          "type": "string"
        }
      }
    },
    "coreapi.AttributeMapRequest": {
      "title": "coreapi.AttributeMapRequest",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "monetary_value": {
            "type": "object",
            "$ref": "#/definitions/coreapi.MonetaryValue"
          },
          "type": {
            "type": "string",
            "enum": [
              "integer",
              "decimal",
              "string",
              "bytes",
              "timestamp",
              "monetary"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      }
    },
    "coreapi.NFT": {
      "title": "coreapi.NFT",
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "token_index": {
          "type": "string"
        }
      }
    },
    "entity.CryptoPaymentMethod": {
      "title": "entity.CryptoPaymentMethod",
      "type": "object",
      "properties": {
        "chain_uri": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "supported_currency": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "byteutils.HexBytes": {
      "title": "byteutils.HexBytes",
      "type": "array",
      "items": {}
    },
    "userapi.FundingRequest": {
      "title": "userapi.FundingRequest",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "$ref": "#/definitions/funding.Data"
        }
      }
    },
    "v2.CreateDocumentRequest": {
      "title": "v2.CreateDocumentRequest",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "$ref": "#/definitions/coreapi.AttributeMapRequest"
        },
        "data": {
          "type": "object"
        },
        "document_id": {
          "description": "if provided, creates the next version of the document.",
          "type": "string"
        },
        "read_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scheme": {
          "type": "string",
          "enum": ["generic", "entity"]
        },
        "write_access": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "entity.OtherPaymentMethod": {
      "title": "entity.OtherPaymentMethod",
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string"
        },
        "pay_to": {
          "type": "string"
        },
        "supported_currency": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v2.TransitionRules": {
      "title": "v2.TransitionRules",
      "type": "object",
      "properties": {
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v2.TransitionRule"
          }
        }
      }
    },
    "coreapi.TransferNFTRequest": {
      "title": "coreapi.TransferNFTRequest",
      "type": "object",
      "properties": {
        "to": {
          "type": "string"
        }
      }
    },
    "userapi.EntityDataResponse": {
      "title": "userapi.EntityDataResponse",
      "type": "object",
      "properties": {
        "entity": {
          "type": "object",
          "$ref": "#/definitions/entity.Data"
        },
        "relationships": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userapi.Relationship"
          }
        }
      }
    },
    "httputils.HTTPError": {
      "title": "httputils.HTTPError",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "coreapi.NFTResponseHeader": {
      "title": "coreapi.NFTResponseHeader",
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string"
        }
      }
    },
    "userapi.ShareEntityResponse": {
      "title": "userapi.ShareEntityResponse",
      "type": "object",
      "properties": {
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.ResponseHeader"
        },
        "relationship": {
          "type": "object",
          "$ref": "#/definitions/userapi.Relationship"
        }
      }
    },
    "funding.Signature": {
      "title": "funding.Signature",
      "type": "object",
      "properties": {
        "identity": {
          "type": "string"
        },
        "outdated_signature": {
          "type": "string"
        },
        "signed_version": {
          "type": "string"
        },
        "valid": {
          "type": "string"
        }
      }
    },
    "coreapi.Account": {
      "title": "coreapi.Account",
      "type": "object",
      "properties": {
        "centrifuge_chain_account": {
          "type": "object",
          "$ref": "#/definitions/config.CentChainAccount"
        },
        "eth_account": {
          "type": "object",
          "$ref": "#/definitions/coreapi.EthAccount"
        },
        "eth_default_account_name": {
          "type": "string"
        },
        "identity_id": {
          "type": "string"
        },
        "p2p_key_pair": {
          "type": "object",
          "$ref": "#/definitions/coreapi.KeyPair"
        },
        "receive_event_notification_endpoint": {
          "type": "string"
        },
        "signing_key_pair": {
          "type": "object",
          "$ref": "#/definitions/coreapi.KeyPair"
        }
      }
    },
    "identity.DID": {
      "title": "identity.DID",
      "type": "array",
      "items": {}
    },
    "userapi.ShareEntityRequest": {
      "title": "userapi.ShareEntityRequest",
      "type": "object",
      "properties": {
        "target_identity": {
          "type": "string"
        }
      }
    },
    "jobs.StatusResponse": {
      "title": "jobs.StatusResponse",
      "type": "object",
      "properties": {
        "job_id": {
          "type": "string"
        },
        "last_updated": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "coreapi.KeyPair": {
      "title": "coreapi.KeyPair",
      "type": "object",
      "properties": {
        "pub": {
          "type": "string"
        },
        "pvt": {
          "type": "string"
        }
      }
    },
    "entity.Data": {
      "title": "entity.Data",
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Address"
          }
        },
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Contact"
          }
        },
        "identity": {
          "type": "string"
        },
        "legal_name": {
          "type": "string"
        },
        "payment_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.PaymentDetail"
          }
        }
      }
    },
    "entity.PaymentDetail": {
      "title": "entity.PaymentDetail",
      "type": "object",
      "properties": {
        "bank_payment_method": {
          "type": "object",
          "$ref": "#/definitions/entity.BankPaymentMethod"
        },
        "crypto_payment_method": {
          "type": "object",
          "$ref": "#/definitions/entity.CryptoPaymentMethod"
        },
        "other_payment_method": {
          "type": "object",
          "$ref": "#/definitions/entity.OtherPaymentMethod"
        },
        "predefined": {
          "type": "boolean"
        }
      }
    },
    "v2.TransitionRule": {
      "title": "v2.TransitionRule",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rule_id": {
          "type": "string"
        }
      }
    },
    "v2.Role": {
      "title": "v2.Role",
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "userapi.UpdateTransferDetailRequest": {
      "title": "userapi.UpdateTransferDetailRequest",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "$ref": "#/definitions/transferdetails.Data"
        },
        "document_id": {
          "type": "string"
        },
        "transfer_id": {
          "type": "string"
        }
      }
    },
    "coreapi.TransferNFTResponse": {
      "title": "coreapi.TransferNFTResponse",
      "type": "object",
      "properties": {
        "header": {
          "type": "object",
          "$ref": "#/definitions/coreapi.NFTResponseHeader"
        },
        "registry_address": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        }
      }
    },
    "userapi.CreateTransferDetailRequest": {
      "title": "userapi.CreateTransferDetailRequest",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "$ref": "#/definitions/transferdetails.Data"
        },
        "document_id": {
          "type": "string"
        }
      }
    }
  }
}
